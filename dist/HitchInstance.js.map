{"version":3,"sources":["../src/HitchInstance.ts"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;;;AAGe,MAAM,aAAN,CAAoB;AAM/B,EAAA,WAAW,CACP,GADO,EAEU,SAFV,EAGP;AACA;AACF;AAAA,SAHmB,SAGnB,GAHmB,SAGnB;AACE,SAAK,QAAL,GAAgB,EAAhB;AAEA,SAAK,GAAL,GAAW,IAAI,GAAJ,CAAS,2BAA0B,KAAK,SAAU,mBAAlD,EAAsE,GAAtE,CAAX;AACA,SAAK,GAAL,CAAS,IAAT,GAAgB,OAAhB;AAEA,SAAK,YAAL,GAAoB,IAAI,qBAAJ,EAApB;AAEA,SAAK,SAAL;AACH;;AAED,QAAM,SAAN,GAAiC;AAC7B,UAAM,KAAiB,GAAG,CAAC,MAAM,eAAM,GAAN,CAAU,KAAK,GAAL,CAAS,QAAT,EAAV,EAA+B;AAAE,MAAA,YAAY,EAAE;AAAhB,KAA/B,CAAP,EAAiE,IAA3F;AAEA,QAAI,SAAS,GAAG,KAAK,CAAC,GAAN,CAAW,KAAD,IAAW,KAAK,CAAC,IAA3B,CAAhB;AACA,QAAI,OAAuC,GAAG,IAAI,GAAJ,EAA9C;AACA,QAAI,QAAQ,GAAG,EAAf;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,CAAC,KAAD,EAAQ,KAAR,KAAkB;AAAE,MAAA,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,KAAD,CAArB,EAA8B,KAA9B;AAAsC,MAAA,QAAQ,CAAC,IAAT,CAAc,SAAS,CAAC,KAAD,CAAvB;AAAkC,KAA1G;AAEA,SAAK,KAAL,GAAa,OAAb;AACA,SAAK,QAAL,GAAgB,QAAhB;AAEA,SAAK,YAAL,CAAkB,IAAlB,CAAuB,OAAvB;AACH;;AAED,EAAA,SAAS,CAAC,QAAD,EAA4B;AACjC,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,QAAL,CAAc,IAAd,CAAoB,GAAD,IAAS,GAAG,CAAC,WAAJ,OAAsB,QAAQ,CAAC,WAAT,EAAlD,CAAf,EAA0F,SAAjG;AACH;;AAED,QAAM,KAAN,GAA6B;AACzB,UAAM,sBAAa,IAAb,CAAkB,KAAK,YAAvB,EAAqC,OAArC,CAAN;AACH;;AA1C8B","file":"HitchInstance.js","sourcesContent":["import axios from \"axios\";\nimport HitchEmitter from \"./HitchEmitter\";\nimport { FlagData } from \"./FlagData\";\n\nexport default class HitchInstance {\n    private flags: Map<string, Partial<FlagData>>;\n    private flagKeys: string[];\n    private url: URL;\n    private hitchEmitter: HitchEmitter;\n\n    constructor(\n        url: string,\n        private readonly groupName: string,\n        // private readonly userID: string,\n        // private pollingInterval: number,\n    ) {\n        this.flagKeys = [];\n\n        this.url = new URL(`/api/v1/flags?groupName=${this.groupName}&isArchived=false`, url);\n        this.url.port = \"28191\";\n\n        this.hitchEmitter = new HitchEmitter();\n\n        this.fetchData();\n    }\n\n    async fetchData(): Promise<void> {\n        const flags: FlagData[] = (await axios.get(this.url.toString(), { responseType: \"json\" })).data;\n\n        let flagNames = flags.map((value) => value.name);\n        let tempMap: Map<string, Partial<FlagData>> = new Map();\n        let tempKeys = [];\n        flags.forEach((value, index) => { tempMap.set(flagNames[index], value); tempKeys.push(flagNames[index]); });\n\n        this.flags = tempMap;\n        this.flagKeys = tempKeys;\n\n        this.hitchEmitter.emit(\"ready\");\n    }\n\n    isEnabled(flagName: string): boolean {\n        return this.flags.get(this.flagKeys.find((key) => key.toUpperCase() === flagName.toUpperCase())).isEnabled;\n    }\n\n    async ready(): Promise<void> {\n        await HitchEmitter.once(this.hitchEmitter, \"ready\");\n    }\n}\n"]}